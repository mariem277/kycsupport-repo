const onSubmit = async (data: CustomerWithDocumentsFormValues) => { setIsSubmittingForm(true); // eslint-disable-next-line no-console console.log('Final form submission data:', data); try { // Structure data for the final API call const finalCustomerData = { fullName: data.fullName, phone: data.phone, dob: data.dob ? dayjs(data.dob).toISOString() : null, idNumber: data.idNumber, address: data.address, kycStatus: data.kycStatus, // Any other customer fields }; const documentsToSave = []; // Add CIN document if (data.cinDocument.fileUrl) { documentsToSave.push({ fileUrl: data.cinDocument.fileUrl, qualityScore: data.cinDocument.qualityScore, issues: data.cinDocument.issues, fileName: data.cinDocument.fileName, fileType: data.cinDocument.fileType, documentType: 'CIN', // Custom type to distinguish }); } // Add other documents data.otherDocuments.forEach(doc => { if (doc.fileUrl || doc.content) { documentsToSave.push({ fileUrl: doc.fileUrl, qualityScore: doc.qualityScore, issues: doc.issues, fileName: doc.fileName, fileType: doc.fileType, content: doc.content, documentType: 'OTHER', // Custom type for other docs }); } }); // Assuming a new API endpoint for combined customer and document creation // Example: POST /api/customers-with-documents const createResponse = await axios.post('/api/customers-with-documents', { customer: finalCustomerData, documents: documentsToSave, }); // Handle success onSuccess?.(); // Trigger refresh of main customer list onClose(); // Close the modal reset(); // Reset form } catch (error) { alert('Failed to create customer and documents. Please try again.'); } finally { setIsSubmittingForm(false); } };
